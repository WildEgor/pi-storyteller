// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	kandinsky "github.com/WildEgor/pi-storyteller/pkg/kandinsky"
	mock "github.com/stretchr/testify/mock"
)

// KandinskyClientMock is an autogenerated mock type for the IKandinskyClient type
type KandinskyClientMock struct {
	mock.Mock
}

// CheckStatus provides a mock function with given fields: ctx, uuid
func (_m *KandinskyClientMock) CheckStatus(ctx context.Context, uuid string) (*kandinsky.GenerateImageResult, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CheckStatus")
	}

	var r0 *kandinsky.GenerateImageResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*kandinsky.GenerateImageResult, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *kandinsky.GenerateImageResult); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kandinsky.GenerateImageResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateImage provides a mock function with given fields: ctx, prompt, opts
func (_m *KandinskyClientMock) GenerateImage(ctx context.Context, prompt string, opts *kandinsky.GenerateImageOpts) (*kandinsky.GenerateResult, error) {
	ret := _m.Called(ctx, prompt, opts)

	if len(ret) == 0 {
		panic("no return value specified for GenerateImage")
	}

	var r0 *kandinsky.GenerateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *kandinsky.GenerateImageOpts) (*kandinsky.GenerateResult, error)); ok {
		return rf(ctx, prompt, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *kandinsky.GenerateImageOpts) *kandinsky.GenerateResult); ok {
		r0 = rf(ctx, prompt, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kandinsky.GenerateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *kandinsky.GenerateImageOpts) error); ok {
		r1 = rf(ctx, prompt, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModels provides a mock function with given fields: ctx
func (_m *KandinskyClientMock) GetModels(ctx context.Context) ([]kandinsky.ModelResult, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetModels")
	}

	var r0 []kandinsky.ModelResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]kandinsky.ModelResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []kandinsky.ModelResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kandinsky.ModelResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKandinskyClientMock creates a new instance of KandinskyClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKandinskyClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *KandinskyClientMock {
	mock := &KandinskyClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
